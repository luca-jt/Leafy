raytrace the current scene
switchable render backends -> vulkan support
skeletal animations
collision fix -> sequential solver?
volumetric rendering -> voxels https://eisenwave.github.io/voxel-compression-docs/svo/svo.html
graphics -> https://youtu.be/Uc8FEI5bg3w, screen space effects, reflection with dynamic environment maps, water shader, post-processing: b/w, depth of field
scene files and loading of them -> serialization (serde) -> editor
shadow anti-aliasing -> pcss
cascaded shadow mapping
2D animation frames
2D sprite hitboxes with seperate collision checking
raycasting
particle system https://youtu.be/GK0jHlv3e3w | -> glPoints? , variants: facing the cam, decay time (has a distribution), permanent, ... , compute shaders?
ui basics + font rendering + events for ui struct (e.g. dpi scaling, mouse)

full rewrite of the rendering system
shading type in component -> add styles like cell shading -> together in renderable component?
object outlining with stencil buffer
bloom
material, normal map and light map integration
different obj loader that also supports mtl files and support mtl files in the engine -> https://github.com/Twinklebear/tobj -> more meshes, skeletons, vertex colors

better memory management for the entities with arenas -> dont remove the archetypes?, use the arena box, swap_remove when deleting entities, minimize the hash map look ups
pre-allocate the vectors used in the light source management every frame
make state global that gets duplicated in rendering -> shadow maps + renderers + cams
