raytrace the current scene
switchable render backends -> vulkan support
skeletal animations
collision fix -> sequential solver? + better memory allocation + performance, terrain collision, trees
volumetric rendering -> voxels https://eisenwave.github.io/voxel-compression-docs/svo/svo.html
graphics -> https://youtu.be/Uc8FEI5bg3w, screen space effects, reflection with dynamic environment maps, water shader, post-processing: b/w, depth of field
scene files and loading of them -> serialization (serde) -> editor
shadow anti-aliasing -> pcss
cascaded shadow mapping -> dir light shadow maps need projection matrix size parameter
2D animation frames
2D sprite hitboxes with seperate collision checking
raycasting
particle system https://youtu.be/GK0jHlv3e3w | -> glPoints? , variants: facing the cam, decay time (has a distribution), permanent, ... , compute shaders?
ui basics + font rendering + events for ui struct (e.g. dpi scaling, mouse)

full rewrite of the rendering system
shading type in component -> add styles like cell shading -> together in renderable component?
object outlining with stencil buffer
bloom

dont automatically check for transparency in textures and use a flag in the texture in the components
asset data arena allocator
documentation (make shure the content is correct as well) + log messages
use all texture types and materials in the shaders
use the vertex colors in renderers and algorithms
material texture loading needs to be independant of the obj file loading because the materialsource can be created independantly -> material textures need to be able to be loaded manually as well, but are still automatically loaded from a reference in an obj file
correctly treat empty attribute vectors in the mesh loading -> maybe use optionals in the mesh
a mesh has an optional material identifier stored that is used to lookup in the material register
make shure that the paths for the materials and the material textures are fine -> the tobj strings are only the names
replace panics with default returns and an error message in the logger when possible
reduce use statements by having a pub(crate) prelude module
