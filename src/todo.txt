controller events
animations
custom shaders?
graphics improvement -> https://youtu.be/Uc8FEI5bg3w
scene files and loading of them -> serialization (serde)
voxelized meshes + hitboxes (for non-convex cases) -> Mesh becomes enum | https://eisenwave.github.io/voxel-compression-docs/svo/svo.html
volumetric rendering -> voxels
raytracing the current scene
shadow anti-aliasing -> pcss
cascaded shadow mapping
using a different obj loader that also supports mtl files and support mtl files in the engine -> https://github.com/Twinklebear/tobj
object outlining with stencil buffer
---------------------------------------------------------------------
make some engine systems modular with features
rework the inertia and collision stuff -> collision point is slightly off
2D sprite hitboxes with seperate collision checking
cube shadow maps for point lights
particle system https://youtu.be/GK0jHlv3e3w | -> glPoints? , variants: facing the cam, decay time (has a distribution), permanent, ... , compute shaders?
dpi scale factor event handling? -> render res handled by screen texture res (if that setting is in %, maybe scale that or smth)
materials -> reflection with dynamic environment maps, water?
new rendering system with effect shaders that renders to a screen texture (for SSAO?) -> maybe only later
ui basics + font rendering + events for ui struct
conways game of life example
sprite renderer -> depth layers configurable, sprite component, depth test must be specified
audio system rewrite -> caching of audion sources, correct management of the audio state
disable face culling for transparent objects

depth testing:
transparent render pass with gl::DepthMask(gl::FALSE) that contains only the objects that have transparent fragments
